{
  "name": "clusterfck",
  "description": "K-means and hierarchical clustering",
  "version": "0.6.0",
  "author": {
    "name": "Heather Arthur",
    "email": "fayearthur@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/harthur/clusterfck.git"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {},
  "devDependencies": {
    "uglify-js": "*",
    "underscore": "*",
    "nomnom": "*",
    "cradle": "*",
    "connect": "*",
    "browserify": "*"
  },
  "main": "./lib/clusterfck",
  "readme": "# Clusterfck\nA js [cluster analysis](http://en.wikipedia.org/wiki/Cluster_analysis) library. Includes [Hierarchical (agglomerative) clustering](http://en.wikipedia.org/wiki/Hierarchical_clustering) and [K-means clustering](http://en.wikipedia.org/wiki/K-means_clustering). [Demo here](http://harthur.github.com/clusterfck/demos/colors/).\n\n# Install\n\nFor node.js:\n\n```bash\nnpm install clusterfck\n```\nOr grab the [browser file](http://harthur.github.com/clusterfck/demos/colors/clusterfck.js)\n\n\n# K-means\n\n```javascript\nvar clusterfck = require(\"clusterfck\");\n\nvar colors = [\n   [20, 20, 80],\n   [22, 22, 90],\n   [250, 255, 253],\n   [0, 30, 70],\n   [200, 0, 23],\n   [100, 54, 100],\n   [255, 13, 8]\n];\n\n// Calculate clusters.\nvar clusters = clusterfck.kmeans(colors, 3);\n```\n\nThe second argument to `kmeans` is the number of clusters you want (default is `Math.sqrt(n/2)` where `n` is the number of vectors). It returns an array of clusters, for this example:\n\n```javascript\n[\n  [[200,0,23], [255,13,8]],\n  [[20,20,80], [22,22,90], [0,30,70], [100,54,100]],\n  [[250,255,253]]\n]\n```\n\n#### Classification\n\nFor classification, instantiate a new Kmeans() object.\n\n```javascript\nvar kmeans = new clusterfck.Kmeans();\n\n// Calculate clusters.\nvar clusters = kmeans.cluster(colors, 3);\n\n// Calculate cluster index for a new data point.\nvar clusterIndex = kmeans.classify([0, 0, 225]);\n```\n\n#### Serialization\n\nThe toJSON() and fromJSON() methods are available for serialization.\n\n```javascript\n// Serialize centroids to JSON.\nvar json = kmeans.toJSON();\n\n// Deserialize centroids from JSON.\nkmeans = kmeans.fromJSON(json);\n\n// Calculate cluster index from a previously serialized set of centroids.\nvar clusterIndex = kmeans.classify([0, 0, 225]);\n```\n\n#### Initializing with Existing Centroids\n\n```javascript\n// Take existing centroids, perhaps from a database?\nvar centroids = [ [ 35.5, 31.5, 85 ], [ 250, 255, 253 ], [ 227.5, 6.5, 15.5 ] ];\n\n// Initialize constructor with centroids.\nvar kmeans = new clusterfck.Kmeans(centroids);\n\n// Calculate cluster index.\nvar clusterIndex = kmeans.classify([0, 0, 225]);\n```\n\n#### Accessing Centroids and K value\n\nAfter clustering or loading via fromJSON(), the calculated centers are accessible via the centroids property. Similarly, the K-value can be derived via centroids.length.\n\n```javascript\n// Calculate clusters.\nvar clusters = kmeans.cluster(colors, 3);\n\n// Access centroids, an array of length 3.\nvar centroids = kmeans.centroids;\n\n// Access k-value.\nvar k = centroids.length;\n```\n\n# Hierarchical\n\n```javascript\nvar clusterfck = require(\"clusterfck\");\n\nvar colors = [\n   [20, 20, 80],\n   [22, 22, 90],\n   [250, 255, 253],\n   [100, 54, 255]\n];\n\nvar clusters = clusterfck.hcluster(colors);\n```\n\n`hcluster` returns an object that represents the hierarchy of the clusters with `left` and `right` subtrees. The leaf clusters have a `value` property which is the vector from the data set.\n\n```javascript\n{\n   \"left\": {\n      \"left\": {\n         \"left\": {\n            \"value\": [22, 22, 90]\n         },\n         \"right\": {\n            \"value\": [20, 20, 80]\n         },\n      },\n      \"right\": {\n         \"value\": [100, 54, 255]\n      },\n   },\n   \"right\": {\n      \"value\": [250, 255, 253]\n   }\n}\n```\n\n#### Distance metric and linkage\n\nSpecify the distance metric, one of `\"euclidean\"` (default), `\"manhattan\"`, and `\"max\"`. The linkage criterion is the third argument, one of `\"average\"` (default), `\"single\"`, and `\"complete\"`.\n\n```javascript\nvar tree = clusterfck.hcluster(colors, \"euclidean\", \"single\");\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/harthur/clusterfck/issues"
  },
  "homepage": "https://github.com/harthur/clusterfck",
  "_id": "clusterfck@0.6.0",
  "dist": {
    "shasum": "91319a95f68675c73a592a9edac489f736b8b7bb"
  },
  "_from": "clusterfck@*",
  "_resolved": "https://registry.npmjs.org/clusterfck/-/clusterfck-0.6.0.tgz"
}
